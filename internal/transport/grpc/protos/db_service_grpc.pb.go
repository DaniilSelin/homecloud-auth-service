// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: db_service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DBService_CreateUser_FullMethodName                = "/dbservice.DBService/CreateUser"
	DBService_GetUserByID_FullMethodName               = "/dbservice.DBService/GetUserByID"
	DBService_GetUserByEmail_FullMethodName            = "/dbservice.DBService/GetUserByEmail"
	DBService_UpdateUser_FullMethodName                = "/dbservice.DBService/UpdateUser"
	DBService_UpdatePassword_FullMethodName            = "/dbservice.DBService/UpdatePassword"
	DBService_UpdateUsername_FullMethodName            = "/dbservice.DBService/UpdateUsername"
	DBService_UpdateEmailVerification_FullMethodName   = "/dbservice.DBService/UpdateEmailVerification"
	DBService_UpdateLastLogin_FullMethodName           = "/dbservice.DBService/UpdateLastLogin"
	DBService_UpdateFailedLoginAttempts_FullMethodName = "/dbservice.DBService/UpdateFailedLoginAttempts"
	DBService_UpdateLockedUntil_FullMethodName         = "/dbservice.DBService/UpdateLockedUntil"
	DBService_UpdateStorageUsage_FullMethodName        = "/dbservice.DBService/UpdateStorageUsage"
	DBService_CheckEmailExists_FullMethodName          = "/dbservice.DBService/CheckEmailExists"
	DBService_CheckUsernameExists_FullMethodName       = "/dbservice.DBService/CheckUsernameExists"
)

// DBServiceClient is the client API for DBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type DBServiceClient interface {
	// User operations
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserID, error)
	GetUserByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error)
	GetUserByEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateEmailVerification(ctx context.Context, in *UpdateEmailVerificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateLastLogin(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFailedLoginAttempts(ctx context.Context, in *UpdateFailedLoginAttemptsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateLockedUntil(ctx context.Context, in *UpdateLockedUntilRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateStorageUsage(ctx context.Context, in *UpdateStorageUsageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckEmailExists(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	CheckUsernameExists(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
}

type dBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDBServiceClient(cc grpc.ClientConnInterface) DBServiceClient {
	return &dBServiceClient{cc}
}

func (c *dBServiceClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserID)
	err := c.cc.Invoke(ctx, DBService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetUserByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, DBService_GetUserByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetUserByEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, DBService_GetUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateEmailVerification(ctx context.Context, in *UpdateEmailVerificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateEmailVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateLastLogin(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateLastLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateFailedLoginAttempts(ctx context.Context, in *UpdateFailedLoginAttemptsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateFailedLoginAttempts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateLockedUntil(ctx context.Context, in *UpdateLockedUntilRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateLockedUntil_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateStorageUsage(ctx context.Context, in *UpdateStorageUsageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DBService_UpdateStorageUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) CheckEmailExists(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, DBService_CheckEmailExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) CheckUsernameExists(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, DBService_CheckUsernameExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBServiceServer is the server API for DBService service.
// All implementations must embed UnimplementedDBServiceServer
// for forward compatibility.
//
// Service definition
type DBServiceServer interface {
	// User operations
	CreateUser(context.Context, *User) (*UserID, error)
	GetUserByID(context.Context, *UserID) (*User, error)
	GetUserByEmail(context.Context, *EmailRequest) (*User, error)
	UpdateUser(context.Context, *User) (*emptypb.Empty, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*emptypb.Empty, error)
	UpdateUsername(context.Context, *UpdateUsernameRequest) (*emptypb.Empty, error)
	UpdateEmailVerification(context.Context, *UpdateEmailVerificationRequest) (*emptypb.Empty, error)
	UpdateLastLogin(context.Context, *UserID) (*emptypb.Empty, error)
	UpdateFailedLoginAttempts(context.Context, *UpdateFailedLoginAttemptsRequest) (*emptypb.Empty, error)
	UpdateLockedUntil(context.Context, *UpdateLockedUntilRequest) (*emptypb.Empty, error)
	UpdateStorageUsage(context.Context, *UpdateStorageUsageRequest) (*emptypb.Empty, error)
	CheckEmailExists(context.Context, *EmailRequest) (*ExistsResponse, error)
	CheckUsernameExists(context.Context, *UsernameRequest) (*ExistsResponse, error)
	mustEmbedUnimplementedDBServiceServer()
}

// UnimplementedDBServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDBServiceServer struct{}

func (UnimplementedDBServiceServer) CreateUser(context.Context, *User) (*UserID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedDBServiceServer) GetUserByID(context.Context, *UserID) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedDBServiceServer) GetUserByEmail(context.Context, *EmailRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedDBServiceServer) UpdateUser(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedDBServiceServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedDBServiceServer) UpdateUsername(context.Context, *UpdateUsernameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsername not implemented")
}
func (UnimplementedDBServiceServer) UpdateEmailVerification(context.Context, *UpdateEmailVerificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailVerification not implemented")
}
func (UnimplementedDBServiceServer) UpdateLastLogin(context.Context, *UserID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLastLogin not implemented")
}
func (UnimplementedDBServiceServer) UpdateFailedLoginAttempts(context.Context, *UpdateFailedLoginAttemptsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFailedLoginAttempts not implemented")
}
func (UnimplementedDBServiceServer) UpdateLockedUntil(context.Context, *UpdateLockedUntilRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLockedUntil not implemented")
}
func (UnimplementedDBServiceServer) UpdateStorageUsage(context.Context, *UpdateStorageUsageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorageUsage not implemented")
}
func (UnimplementedDBServiceServer) CheckEmailExists(context.Context, *EmailRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmailExists not implemented")
}
func (UnimplementedDBServiceServer) CheckUsernameExists(context.Context, *UsernameRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUsernameExists not implemented")
}
func (UnimplementedDBServiceServer) mustEmbedUnimplementedDBServiceServer() {}
func (UnimplementedDBServiceServer) testEmbeddedByValue()                   {}

// UnsafeDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBServiceServer will
// result in compilation errors.
type UnsafeDBServiceServer interface {
	mustEmbedUnimplementedDBServiceServer()
}

func RegisterDBServiceServer(s grpc.ServiceRegistrar, srv DBServiceServer) {
	// If the following call pancis, it indicates UnimplementedDBServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DBService_ServiceDesc, srv)
}

func _DBService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetUserByID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetUserByEmail(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateUsername(ctx, req.(*UpdateUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateEmailVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateEmailVerification(ctx, req.(*UpdateEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateLastLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateLastLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateLastLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateLastLogin(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateFailedLoginAttempts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFailedLoginAttemptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateFailedLoginAttempts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateFailedLoginAttempts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateFailedLoginAttempts(ctx, req.(*UpdateFailedLoginAttemptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateLockedUntil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLockedUntilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateLockedUntil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateLockedUntil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateLockedUntil(ctx, req.(*UpdateLockedUntilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateStorageUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStorageUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateStorageUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateStorageUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateStorageUsage(ctx, req.(*UpdateStorageUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_CheckEmailExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CheckEmailExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CheckEmailExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CheckEmailExists(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_CheckUsernameExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CheckUsernameExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CheckUsernameExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CheckUsernameExists(ctx, req.(*UsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DBService_ServiceDesc is the grpc.ServiceDesc for DBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbservice.DBService",
	HandlerType: (*DBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _DBService_CreateUser_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _DBService_GetUserByID_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _DBService_GetUserByEmail_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _DBService_UpdateUser_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _DBService_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateUsername",
			Handler:    _DBService_UpdateUsername_Handler,
		},
		{
			MethodName: "UpdateEmailVerification",
			Handler:    _DBService_UpdateEmailVerification_Handler,
		},
		{
			MethodName: "UpdateLastLogin",
			Handler:    _DBService_UpdateLastLogin_Handler,
		},
		{
			MethodName: "UpdateFailedLoginAttempts",
			Handler:    _DBService_UpdateFailedLoginAttempts_Handler,
		},
		{
			MethodName: "UpdateLockedUntil",
			Handler:    _DBService_UpdateLockedUntil_Handler,
		},
		{
			MethodName: "UpdateStorageUsage",
			Handler:    _DBService_UpdateStorageUsage_Handler,
		},
		{
			MethodName: "CheckEmailExists",
			Handler:    _DBService_CheckEmailExists_Handler,
		},
		{
			MethodName: "CheckUsernameExists",
			Handler:    _DBService_CheckUsernameExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_service.proto",
}
